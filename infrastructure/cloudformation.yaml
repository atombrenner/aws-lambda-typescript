---
Description: AWS Lambda Typescript Stack
Parameters:
  SomeParameter:
    Type: String
  # Version:
  #   Type: String

Outputs:
  LambdaUrl:
    Description: The HTTPS endpoint of the lambda function
    Value: !GetAtt LambdaUrl.FunctionUrl

Resources:
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName} # note: the /aws/lambda/ is mandatory as logstreams are automatically created by AWS in this LogGroup
      RetentionInDays: 7

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref AWS::StackName
      Description: aws-lambda-typescript-example
      Runtime: nodejs18.x
      Timeout: 3
      MemorySize: 256
      Handler: lambda.handler
      Code:
        ZipFile: 'placeholder - do not change'
        # An alternate way to deploy is to upload the lambda zip artifact to an S3 bucket
        # and reference the versioned artificat from the stack. Then set the version you want
        # to deploy and update a stack. Because stack updates always takes several seconds,
        # this is not the fastest way, but the safest way (auditable, rollback to older versions)
        # ---
        # S3Bucket: lambda-artifacts.example.com
        # S3Key: !Sub example/${Version}.zip

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: production
          NODE_OPTIONS: '--enable-source-maps'
          SOME_PARAMETER: !Ref SomeParameter

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      FunctionUrlAuthType: 'NONE'
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  LambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      Cors:
        MaxAge: 3600
        AllowOrigins: ['*']
      TargetFunctionArn: !Ref Lambda

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3-ReadAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::some-bucket.example.com/*
